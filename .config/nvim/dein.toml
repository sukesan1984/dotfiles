[[plugins]]
repo = 'Shougo/dein.vim'

#[[plugins]]
#repo = 'joshdick/onedark.vim'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = "tpope/vim-rhubarb"

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = 'bash install.sh'
hook_add = '''
    set hidden
    let g:LanguageClient_autoStart = 1
    let g:LanguageClient_serverCommands = {
        \ 'c': ['clangd'],
        \ 'cpp': ['clangd'],
	\ 'go': ['gopls'],
	\ 'python': ['pyls'],
	\ 'ruby': ['solargraph', 'stdio'],
	\ 'typescript': ['typescript-language-server'],
\ }
    let g:LanguageClient_loadSettings = 1
    let g:LanguageClient_hasSnippetSupport = 0
    set completefunc=LanguageClient#complete
    nnoremap <F5> :call LanguageClient_contextMenu()<CR>
    " Or map each action separately
    nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
    nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
    nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
'''

[[plugins]]
repo = 'fatih/vim-go'
hook_add = '''
  " 保存時に必要なimportを自動的に挿入
  let g:go_fmt_command = "goimports"
  " LSPに任せる機能をOFFにする
  let g:go_def_mapping_enabled = 0
  let g:go_doc_keywordprg_enabled = 0
'''

# status line
[[plugins]]
repo = 'itchyny/lightline.vim'
#hook_add = '''
#    let g:lightline = {'colorscheme': 'onedark'}
#'''

# 不要な空白行を削除
[[plugins]]
repo = 'ntpeters/vim-better-whitespace'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
set list listchars=tab:\¦\ 
set tabstop=4
set shiftwidth=4
'''

#[[plugins]]
#repo = 'preservim/nerdtree'
#hook_add = '''
#    nmap <C-e> :NERDTreeToggle<CR>
#'''

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
    nmap <F8> :TagbarToggle<CR>
'''

[[plugins]]
repo = 'junegunn/fzf'
build = './install --bin'
merged = '0'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
    nmap <C-p> :History<CR>
    command! -bang -nargs=* Rg
      \ call fzf#vim#grep(
      \   'rg --line-number --no-heading '.shellescape(<q-args>), 0,
      \   fzf#vim#with_preview({'options': '--exact --reverse'}, 'right:50%:wrap'))
'''
[[plugins]]
repo = '42Paris/42header'
rtp = 'vim'
hook_add = '''
    run stdheader.vim
'''

[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
" Python
" flake8をLinterとして登録
let g:ale_linters = {
	\ 'python': ['flake8', 'mypy'],
	\ 'json': ['jsonlint'],
	\ 'go': ['staticcheck'],
	\ }
let g:ale_python_flake8_executable = g:python3_host_prog
let g:ale_python_flake8_options = '-m flake8'
let g:ale_python_black_executable = g:python3_host_prog
let g:ale_python_black_options = '-m black'
let g:ale_python_autopep8_executable = g:python3_host_prog
let g:ale_python_autopep8_options = '-m autopep8'
let g:ale_python_mypy_executable = g:python3_host_prog
let g:ale_python_mypy_options = '-m mypy'
let g:ale_python_isort_executable = g:python3_host_prog
let g:ale_python_isort_options = '-m isort'
let g:ale_fix_on_save = 1

" Fixerとして登録
let g:ale_fixers = {
	\ 'python': ['autopep8', 'black'],
	\ 'json': ['jq'],
	\}
'''

[[plugins]]
repo = 'chase/vim-ansible-yaml'
hook_add = '''
if has("autocmd")
filetype plugin on
filetype indent on
autocmd FileType yml setlocal sw=2 sts=2 ts=2 et
autocmd FileType yaml setlocal sw=2 sts=2 ts=2 et
endif
'''

[[plugins]]
repo = 'SirVer/ultisnips'
hook_add = '''
let g:UltiSnipsUsePythonVersion = 3
let g:UltiSnipsEditSplit = 'normal'
let g:UltiSnipsSnippetDirectories = ['']
let g:UltiSnipsExpandTrigger = '<c-l>'
let g:UltiSnipsJumpForwardTrigger = '<c-f>'
let g:UltiSnipsJumpBackwardTrigger = '<c-b>'
command! SNIP UltiSnipsEdit
'''


[[plugins]]
repo = 'kristijanhusak/defx-git'


[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'kristijanhusak/defx-icons'
[[plugins]]
repo = 'alexandregv/norminette-vim'
hook_add = '''
" Enable norminette-vim (and gcc)
let g:syntastic_c_checkers = ['norminette', 'gcc']
let g:syntastic_aggregate_errors = 1

" Set the path to norminette (do no set if using norminette of 42 mac)
let g:syntastic_c_norminette_exec = '~/.norminette/norminette.rb'

" Support headers (.h)
let g:c_syntax_for_h = 1
let g:syntastic_c_include_dirs = ['include', '../include', '../../include', 'libft', '../libft/include', '../../libft/include']

" Pass custom arguments to norminette (this one ignores 42header)
let g:syntastic_c_norminette_args = '-R CheckTopCommentHeader'

" Check errors when opening a file (disable to speed up startup time)
let g:syntastic_check_on_open = 1

" Enable error list
let g:syntastic_always_populate_loc_list = 1

" Automatically open error list
let g:syntastic_auto_loc_list = 1

" Skip check when closing
let g:syntastic_check_on_wq = 0
nmap <C-q> :Norminette<CR>
'''
