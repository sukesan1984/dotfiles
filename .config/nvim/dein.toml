[[plugins]]
repo = 'Shougo/dein.vim'

#[[plugins]]
#repo = 'joshdick/onedark.vim'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = "tpope/vim-rhubarb"

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = 'bash install.sh'
hook_add = '''
    set hidden
    let g:LanguageClient_autoStart = 1
    let g:LanguageClient_serverCommands = {
        \ 'c': ['clangd'],
        \ 'cpp': ['clangd'],
	\ 'go': ['gopls'],
	\ 'python': ['pyls'],
	\ 'ruby': ['solargraph', 'stdio'],
	\ 'typescript': ['typescript-language-server'],
	\ 'vue': ['vls']
\ }
    let g:LanguageClient_loadSettings = 1
    let g:LanguageClient_hasSnippetSupport = 0
    set completefunc=LanguageClient#complete
    nnoremap <F5> :call LanguageClient_contextMenu()<CR>
    " Or map each action separately
    nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
    nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
    nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
'''

[[plugins]]
repo = 'fatih/vim-go'
hook_add = '''
  " 保存時に必要なimportを自動的に挿入
  let g:go_fmt_command = "goimports"
  " LSPに任せる機能をOFFにする
  let g:go_def_mapping_enabled = 0
  let g:go_doc_keywordprg_enabled = 0
'''

# status line
[[plugins]]
repo = 'itchyny/lightline.vim'
#hook_add = '''
#    let g:lightline = {'colorscheme': 'onedark'}
#'''

# 不要な空白行を削除
[[plugins]]
repo = 'ntpeters/vim-better-whitespace'

#[[plugins]]
#repo = 'Yggdroot/indentLine'
#hook_add = '''
#set list listchars=tab:\¦\ 
#set tabstop=4
#set shiftwidth=4
#'''

#[[plugins]]
#repo = 'preservim/nerdtree'
#hook_add = '''
#    nmap <C-e> :NERDTreeToggle<CR>
#'''

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
    nmap <F8> :TagbarToggle<CR>
'''

[[plugins]]
repo = 'junegunn/fzf'
build = './install --bin'
merged = '0'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
	command! -bang -nargs=* MemoGrepWithFZF
      \ call fzf#vim#grep(
      \   'memo grep '.shellescape(<q-args>), 0,
      \   fzf#vim#with_preview({'options': '--exact --reverse'}, 'right:50%:wrap'))
    nmap <C-p> :History<CR>
    command! -bang -nargs=* Rg
      \ call fzf#vim#grep(
      \   'rg --line-number --no-heading '.shellescape(<q-args>), 0,
      \   fzf#vim#with_preview({'options': '--exact --reverse'}, 'right:50%:wrap'))
	nmap <C-g> :Rg<CR>
    command! -bang -nargs=* GGrep
	  \ call fzf#vim#grep(
	  \   'git grep --line-number -- '.shellescape(<q-args>),
	  \   fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0]}), <bang>0)
	nnoremap <C-l> :MemoGrepWithFZF<SPACE>
'''
[[plugins]]
repo = '42Paris/42header'
rtp = 'vim'
hook_add = '''
    run stdheader.vim
'''

[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
" Python
" flake8をLinterとして登録
let g:ale_linters = {
	\ 'python': ['flake8', 'mypy'],
	\ 'json': ['jsonlint'],
	\ 'go': ['staticcheck'],
	\ }
let g:ale_python_flake8_executable = g:python3_host_prog
let g:ale_python_flake8_options = '-m flake8'
let g:ale_python_black_executable = g:python3_host_prog
let g:ale_python_black_options = '-m black'
let g:ale_python_autopep8_executable = g:python3_host_prog
let g:ale_python_autopep8_options = '-m autopep8'
let g:ale_python_mypy_executable = g:python3_host_prog
let g:ale_python_mypy_options = '-m mypy'
let g:ale_python_isort_executable = g:python3_host_prog
let g:ale_python_isort_options = '-m isort'
let g:ale_fix_on_save = 1

" Fixerとして登録
let g:ale_fixers = {
	\ 'python': ['autopep8', 'black'],
	\ 'json': ['jq'],
	\ 'sql': ['sqlformat', 'sqlfmt', 'pgformatter'],
	\}

command! ToggleALEFix let g:ale_fix_on_save = !get(g:, 'ale_fix_on_save', 1) | echo 'ale_fix_on_save: ' . g:ale_fix_on_save
'''

[[plugins]]
repo = 'chase/vim-ansible-yaml'
hook_add = '''
if has("autocmd")
filetype plugin on
filetype indent on
autocmd FileType yml setlocal sw=2 sts=2 ts=2 et
autocmd FileType yaml setlocal sw=2 sts=2 ts=2 et
endif
'''

#[[plugins]]
#repo = 'SirVer/ultisnips'
#hook_add = '''
#let g:UltiSnipsUsePythonVersion = 3
#let g:UltiSnipsEditSplit = 'normal'
#let g:UltiSnipsSnippetDirectories = ['']
#let g:UltiSnipsExpandTrigger = '<c-l>'
#let g:UltiSnipsJumpForwardTrigger = '<c-f>'
#let g:UltiSnipsJumpBackwardTrigger = '<c-b>'
#command! SNIP UltiSnipsEdit
#'''


[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
autocmd FileType defx call s:defx_my_settings()

nnoremap <silent> <Leader>f :<C-u> Defx <CR>

nmap <C-q> :Defx<CR>
function! s:defx_my_settings() abort
  " Define mappings
  nnoremap <silent><buffer><expr> <CR>
  \ defx#is_directory() ?
  \ defx#do_action('open_tree', 'recursive:1') :
  \ defx#do_action('drop')
  nnoremap <silent><buffer><expr> c
  \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> m
  \ defx#do_action('move')
  nnoremap <silent><buffer><expr> p
  \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> l
  \ defx#do_action('open')
  nnoremap <silent><buffer><expr> E
  \ defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P
  \ defx#do_action('preview')
  nnoremap <silent><buffer><expr> o
  \ defx#do_action('open_tree', 'toggle')
  nnoremap <silent><buffer><expr> K
  \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
  \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M
  \ defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> C
  \ defx#do_action('toggle_columns',
  \                'mark:indent:icon:filename:type:size:time')
  nnoremap <silent><buffer><expr> S
  \ defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><expr> d
  \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
  \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> !
  \ defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> x
  \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy
  \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
  \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ;
  \ defx#do_action('repeat')
  nnoremap <silent><buffer><expr> h
  \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
  \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
  \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
  \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
  \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
  \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
  \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-;>
  \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
  \ defx#do_action('print')
  nnoremap <silent><buffer><expr> cd
  \ defx#do_action('change_vim_cwd')
endfunction
call defx#custom#option('_', {
	\ 'winwidth': 40,
	\ 'split': 'vertical',
	\ 'direction': 'topleft',
	\ 'show_ignored_files': 1,
	\ 'buffer_name': 'exlorer',
	\ 'toggle': 1,
	\ 'resume': 1,
	\ 'columns': 'indent:git:icons:filename:mark',
	\ })
let g:defx_icons_column_length = 3
call defx#custom#column('git', 'column_length', 2)
call defx#custom#column('git', 'indicators', {
	\ 'Modified'  : '✹',
	\ 'Staged'    : '✚',
	\ 'Untracked' : '✭',
	\ 'Renamed'   : '➜',
	\ 'Unmerged'  : '═',
	\ 'Ignored'   : '☒',
	\ 'Deleted'   : '✖',
	\ 'Unknown'   : '?',
	\ })

'''

[[plugins]]
repo = 'kristijanhusak/defx-git'

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'kristijanhusak/defx-icons'

[[plugins]]
repo = 'posva/vim-vue'

[[plugins]]
repo = 'github/copilot.vim'
hook_add = '''
	imap <silent> <C-n> <Plug>(copilot-next)
	imap <silent> <C-p> <Plug>(copilot-prev)
	" マークダウンを有効にする
	let g:copilot_filetypes = {
	\ 'markdown': 1,
	\ }
'''

[[plugins]]
repo = 'glidenote/memolist.vim'
hook_add = '''
    let g:memolist_path='~/work/github/sukesan1984/memolist'
	let g:memolist_memo_suffix="md"
	nnoremap <Leader>mn :MemoNew<CR>
	nnoremap <Leader>ml :MemoList<CR>
	nnoremap <Leader>mg :MemoGrep<CR>
'''

[[plugins]]
repo = 'UtkarshVerma/molokai.nvim'
hook_add = '''
	colorscheme molokai
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
merged = 0
on_event = 'BufRead'
hook_post_update = 'TSUpdate'
hook_source = 'source ~/.config/nvim/plugins/nvim-treesitter.lua'
